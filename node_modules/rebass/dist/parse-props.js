'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
// To do:
// - [ ] Clean up functions and args

var _monolithic = require('cxs/monolithic');

var _monolithic2 = _interopRequireDefault(_monolithic);

var _understyle = require('understyle');

var _understyle2 = _interopRequireDefault(_understyle);

var _deepmerge = require('deepmerge');

var _deepmerge2 = _interopRequireDefault(_deepmerge);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var parseStyleProps = function parseStyleProps(props, theme, removeProps) {
  var scale = theme.scale,
      colors = theme.colors,
      borderRadius = theme.borderRadius;

  var styles = (0, _understyle2.default)(props, theme);
  var rest = clean(props, theme, removeProps);

  return _extends({}, rest, { styles: styles });
};

var clean = function clean(props, theme, removeProps) {
  return Object.keys(props).map(function (key) {
    return {
      key: key,
      value: props[key]
    };
  }).filter(function (_ref) {
    var key = _ref.key;
    return (0, _understyle.filterProps)(theme)(key);
  }).filter(function (_ref2) {
    var key = _ref2.key;
    return removeProps.indexOf(key) < 0;
  }).reduce(function (a, b) {
    a[b.key] = b.value;
    return a;
  }, {});
};

var parseProps = function parseProps(theme, rawProps, baseStyles, options) {
  var name = options.name,
      _options$removeProps = options.removeProps,
      removeProps = _options$removeProps === undefined ? [] : _options$removeProps;


  baseStyles = typeof baseStyles === 'function' ? baseStyles(theme, rawProps) : baseStyles;

  var _parseStyleProps = parseStyleProps(rawProps, theme, removeProps),
      styles = _parseStyleProps.styles,
      _parseStyleProps$css = _parseStyleProps.css,
      css = _parseStyleProps$css === undefined ? {} : _parseStyleProps$css,
      props = _objectWithoutProperties(_parseStyleProps, ['styles', 'css']);

  var compTheme = theme[name] || {};
  var cxsClassName = (0, _monolithic2.default)(_deepmerge2.default.all([baseStyles, compTheme, styles, css], { clone: true }));

  var className = (0, _classnames2.default)(name, cxsClassName, props.className);

  return _extends({}, props, { className: className });
};

exports.default = parseProps;