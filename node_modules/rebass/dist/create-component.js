'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _deepmerge = require('deepmerge');

var _deepmerge2 = _interopRequireDefault(_deepmerge);

var _understyle = require('understyle');

var _understyle2 = _interopRequireDefault(_understyle);

var _basic = require('./themes/basic');

var _basic2 = _interopRequireDefault(_basic);

var _parseProps = require('./parse-props');

var _parseProps2 = _interopRequireDefault(_parseProps);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// To do: handle fill/theme colors prop???

var renders = 0;

var getTheme = function getTheme(_ref) {
  var _ref$rebass = _ref.rebass,
      rebass = _ref$rebass === undefined ? {} : _ref$rebass;
  return (0, _deepmerge2.default)(rebass, _basic2.default, { clone: true });
};

var createComponent = function createComponent(Comp, baseStyles) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var name = options.name;

  var RebassComponent = function (_React$Component) {
    _inherits(RebassComponent, _React$Component);

    function RebassComponent(props, context) {
      _classCallCheck(this, RebassComponent);

      var _this = _possibleConstructorReturn(this, (RebassComponent.__proto__ || Object.getPrototypeOf(RebassComponent)).call(this));

      _this.theme = getTheme(context);
      // To do:
      // - consider parseProps in constructor
      return _this;
    }

    _createClass(RebassComponent, [{
      key: 'render',
      value: function render() {
        // const theme = getTheme(this.context)
        var props = (0, _parseProps2.default)(this.theme, this.props, baseStyles, options);
        // Render test
        // To do: optimize for static styling
        // + props based parser
        // console.log('render', renders++)

        return _react2.default.createElement(Comp, props);
      }
    }]);

    return RebassComponent;
  }(_react2.default.Component);

  RebassComponent.contextTypes = {
    rebass: _react2.default.PropTypes.object
  };

  return RebassComponent;
};

exports.default = createComponent;